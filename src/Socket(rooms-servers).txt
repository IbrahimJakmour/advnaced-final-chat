import SocketIo from 'socket.io'
import translate from 'google-translate-api'

export default function(server){

    /**
     * ,
      servers: [
        {servername:'ai',image:'ai'},
        {servername:'codi',image:'codi'},
        {servername:'webdev',image:'webdev'},
      ],
      rooms: [
        {roomname:'Welcome'},
        {roomname:'General'},
        {roomname:'Web Development'},
      ],
     */

    const servers = [
        { id:4, servername:'General', image:'ai', rooms:[
            { id:0, roomname:'general', users:[], messages:[{text:'dddddhello',image:'ahmad'}]},
            { id:1, roomname:'welcome', users:[], messages:[
                {text:'hello',image:'ahmad'},
                {text:'bonjour',image:'ahmad'},
                {text:'me llamo ahmad',image:'ahmad'}
            ]}
        ]},
        { id:15, servername:'codi', image:'codi', rooms:[
            { id:2, roomname:'general', users:[], messages:[]},
            { id:3, roomname:'welcome', users:[], messages:[
                {text:'hello',image:'ahmad'},
                {text:'bonjour',image:'ahmad'},
                {text:'me llamo ahmad',image:'ahmad'}
            ]}
        ]},
    ]

    const io = SocketIo(server);
    let ids = 4
    const users = [
        {id:0, username:'ahmad',language:'en',password:'batata', servers:[4]},
        {id:1, username:'jad',language:'fr',password:'batata', servers:[15]},
        {id:2, username:'omar',language:'tr',password:'batata', servers:[4,15]},
        {id:3, username:'ali',language:'es',password:'batata', servers:[4]},
    ]
    
    const languages = []
    const connected = []

    io.on('connection', (socket) => {

        let user

        socket.emit('user:list',connected)
        socket.emit('users',users)

        const addUser = (_user) => {
            user = _user
            if(languages.indexOf(user.language)<0){
                languages.push(user.language)
            }
            connected.push(user)
            socket.join(user.language)
            const user_servers = user.servers.map(id=>servers.find(server=>server.id===id))
            joinRoom(user, user_servers[0],user_servers[0].rooms[0].id)
            socket.emit('servers:list',user_servers)
        }

        function joinRoom(user, server,roomId){
            if(user.currentRoom){
                const index = user.currentRoom.users.findIndex(room_user=>room_user.id === user.id)
                index <=0 && user.currentRoom.users.splice(index,1)
            }
            const room = server.rooms.find(room=>room.id === roomId)
            room.users.push(user)
            const users = room.users
            const messages = room.messages
            socket.emit('room:info',{users, messages})
            // user.currentRoom = server.rooms[0].id
            // let currentRoom = server.rooms[roomId].roomname
            // console.log('current room: ',currentRoom)
            // const roomname = room.roomname; 
            // const rooms = {roomname}
            // console.log(rooms)
        }

        socket.on('join:room',(user,server,roomNumber)=>{
            joinRoom(user,server,roomNumber)
        })
        
        socket.on('signup', ( username, password, language ) =>{
            const user = { username, password, language, id:ids++, servers:[4]}
            users.push(user)
            addUser(user)
            socket.emit('signup:ok',user)
        });
        
        socket.on('authenticate',(username,password)=>{
            const user = users.find((user)=>user.username === username && user.password === password)
            if(!user){
                socket.emit('authenticate:no')
                return
            }
            addUser(user)
            socket.emit('authenticate:ok',user)
            
        })

        const removeUserFromConnected = (user) => {
            const index = connected.indexOf(user)
            if(index < 0 ){
                return; // user was not found
            }
            connected.splice(index,1)
        }

        socket.on('disconnect', function(){
            if(!user){ return }

            removeUserFromConnected(user)
            
             const room = io.sockets.adapter.rooms[user.language];
            if(room && room.length <= 0 ){
                const index = languages.indexOf(user.language);
                if(index < 0 ){ return }
                languages.splice(index,1); 
            }
        });
        

        socket.on('message', (text,image) => {
            if(!user){ return; }
            languages.forEach( lg => {
                if( lg === user.language ){
                    io.to(lg).emit('message:broadcast',user.id,text,image)  
                        
                }else{
                    translate(text, { from:user.language, to:lg })
                        .then( ({text}) => 
                            io.to(lg).emit('message:broadcast',user.id,text,image)
                        )
                        .catch( err => console.error(err))
                }
            })
        })


    });
}